/**
 * Event Sourcing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/EventMessage.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



EventMessage::EventMessage()
{
    m_Event_id = utility::conversions::to_string_t("");
    m_Event_idIsSet = false;
    m_Aggregate_id = utility::conversions::to_string_t("");
    m_Aggregate_idIsSet = false;
    m_Aggregate_type = utility::conversions::to_string_t("");
    m_Aggregate_typeIsSet = false;
    m_Version = 0.0;
    m_VersionIsSet = false;
    m_Event_type = utility::conversions::to_string_t("");
    m_Event_typeIsSet = false;
    m_Event_schema_version = utility::conversions::to_string_t("");
    m_Event_schema_versionIsSet = false;
    m_Source = utility::conversions::to_string_t("");
    m_SourceIsSet = false;
    m_Timestamp = utility::datetime();
    m_TimestampIsSet = false;
    m_PayloadIsSet = false;
    m_User_id = utility::conversions::to_string_t("");
    m_User_idIsSet = false;
}

EventMessage::~EventMessage()
{
}

void EventMessage::validate()
{
    // TODO: implement validation
}

web::json::value EventMessage::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_Event_idIsSet)
    {
        val[utility::conversions::to_string_t(U("event_id"))] = ModelBase::toJson(m_Event_id);
    }
    if(m_Aggregate_idIsSet)
    {
        val[utility::conversions::to_string_t(U("aggregate_id"))] = ModelBase::toJson(m_Aggregate_id);
    }
    if(m_Aggregate_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("aggregate_type"))] = ModelBase::toJson(m_Aggregate_type);
    }
    if(m_VersionIsSet)
    {
        val[utility::conversions::to_string_t(U("version"))] = ModelBase::toJson(m_Version);
    }
    if(m_Event_typeIsSet)
    {
        val[utility::conversions::to_string_t(U("event_type"))] = ModelBase::toJson(m_Event_type);
    }
    if(m_Event_schema_versionIsSet)
    {
        val[utility::conversions::to_string_t(U("event_schema_version"))] = ModelBase::toJson(m_Event_schema_version);
    }
    if(m_SourceIsSet)
    {
        val[utility::conversions::to_string_t(U("source"))] = ModelBase::toJson(m_Source);
    }
    if(m_TimestampIsSet)
    {
        val[utility::conversions::to_string_t(U("timestamp"))] = ModelBase::toJson(m_Timestamp);
    }
    if(m_PayloadIsSet)
    {
        val[utility::conversions::to_string_t(U("payload"))] = ModelBase::toJson(m_Payload);
    }
    if(m_User_idIsSet)
    {
        val[utility::conversions::to_string_t(U("user_id"))] = ModelBase::toJson(m_User_id);
    }

    return val;
}

bool EventMessage::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("event_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("event_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEventId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEventId);
            setEventId(refVal_setEventId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("aggregate_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("aggregate_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAggregateId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAggregateId);
            setAggregateId(refVal_setAggregateId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("aggregate_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("aggregate_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setAggregateType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAggregateType);
            setAggregateType(refVal_setAggregateType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("version")));
        if(!fieldValue.is_null())
        {
            double refVal_setVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersion);
            setVersion(refVal_setVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("event_type"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("event_type")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEventType;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEventType);
            setEventType(refVal_setEventType);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("event_schema_version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("event_schema_version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setEventSchemaVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setEventSchemaVersion);
            setEventSchemaVersion(refVal_setEventSchemaVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("source"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("source")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setSource;
            ok &= ModelBase::fromJson(fieldValue, refVal_setSource);
            setSource(refVal_setSource);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("timestamp"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("timestamp")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setTimestamp;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTimestamp);
            setTimestamp(refVal_setTimestamp);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("payload"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("payload")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<AnyType>> refVal_setPayload;
            ok &= ModelBase::fromJson(fieldValue, refVal_setPayload);
            setPayload(refVal_setPayload);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("user_id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("user_id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setUserId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUserId);
            setUserId(refVal_setUserId);
        }
    }
    return ok;
}

void EventMessage::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_Event_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("event_id")), m_Event_id));
    }
    if(m_Aggregate_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("aggregate_id")), m_Aggregate_id));
    }
    if(m_Aggregate_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("aggregate_type")), m_Aggregate_type));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("version")), m_Version));
    }
    if(m_Event_typeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("event_type")), m_Event_type));
    }
    if(m_Event_schema_versionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("event_schema_version")), m_Event_schema_version));
    }
    if(m_SourceIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("source")), m_Source));
    }
    if(m_TimestampIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("timestamp")), m_Timestamp));
    }
    if(m_PayloadIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("payload")), m_Payload));
    }
    if(m_User_idIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("user_id")), m_User_id));
    }
}

bool EventMessage::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("event_id"))))
    {
        utility::string_t refVal_setEventId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("event_id"))), refVal_setEventId );
        setEventId(refVal_setEventId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("aggregate_id"))))
    {
        utility::string_t refVal_setAggregateId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("aggregate_id"))), refVal_setAggregateId );
        setAggregateId(refVal_setAggregateId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("aggregate_type"))))
    {
        utility::string_t refVal_setAggregateType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("aggregate_type"))), refVal_setAggregateType );
        setAggregateType(refVal_setAggregateType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("version"))))
    {
        double refVal_setVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("version"))), refVal_setVersion );
        setVersion(refVal_setVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("event_type"))))
    {
        utility::string_t refVal_setEventType;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("event_type"))), refVal_setEventType );
        setEventType(refVal_setEventType);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("event_schema_version"))))
    {
        utility::string_t refVal_setEventSchemaVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("event_schema_version"))), refVal_setEventSchemaVersion );
        setEventSchemaVersion(refVal_setEventSchemaVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("source"))))
    {
        utility::string_t refVal_setSource;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("source"))), refVal_setSource );
        setSource(refVal_setSource);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("timestamp"))))
    {
        utility::datetime refVal_setTimestamp;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("timestamp"))), refVal_setTimestamp );
        setTimestamp(refVal_setTimestamp);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("payload"))))
    {
        std::map<utility::string_t, std::shared_ptr<AnyType>> refVal_setPayload;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("payload"))), refVal_setPayload );
        setPayload(refVal_setPayload);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("user_id"))))
    {
        utility::string_t refVal_setUserId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("user_id"))), refVal_setUserId );
        setUserId(refVal_setUserId);
    }
    return ok;
}

utility::string_t EventMessage::getEventId() const
{
    return m_Event_id;
}

void EventMessage::setEventId(const utility::string_t& value)
{
    m_Event_id = value;
    m_Event_idIsSet = true;
}

bool EventMessage::eventIdIsSet() const
{
    return m_Event_idIsSet;
}

void EventMessage::unsetEvent_id()
{
    m_Event_idIsSet = false;
}
utility::string_t EventMessage::getAggregateId() const
{
    return m_Aggregate_id;
}

void EventMessage::setAggregateId(const utility::string_t& value)
{
    m_Aggregate_id = value;
    m_Aggregate_idIsSet = true;
}

bool EventMessage::aggregateIdIsSet() const
{
    return m_Aggregate_idIsSet;
}

void EventMessage::unsetAggregate_id()
{
    m_Aggregate_idIsSet = false;
}
utility::string_t EventMessage::getAggregateType() const
{
    return m_Aggregate_type;
}

void EventMessage::setAggregateType(const utility::string_t& value)
{
    m_Aggregate_type = value;
    m_Aggregate_typeIsSet = true;
}

bool EventMessage::aggregateTypeIsSet() const
{
    return m_Aggregate_typeIsSet;
}

void EventMessage::unsetAggregate_type()
{
    m_Aggregate_typeIsSet = false;
}
double EventMessage::getVersion() const
{
    return m_Version;
}

void EventMessage::setVersion(double value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool EventMessage::versionIsSet() const
{
    return m_VersionIsSet;
}

void EventMessage::unsetVersion()
{
    m_VersionIsSet = false;
}
utility::string_t EventMessage::getEventType() const
{
    return m_Event_type;
}

void EventMessage::setEventType(const utility::string_t& value)
{
    m_Event_type = value;
    m_Event_typeIsSet = true;
}

bool EventMessage::eventTypeIsSet() const
{
    return m_Event_typeIsSet;
}

void EventMessage::unsetEvent_type()
{
    m_Event_typeIsSet = false;
}
utility::string_t EventMessage::getEventSchemaVersion() const
{
    return m_Event_schema_version;
}

void EventMessage::setEventSchemaVersion(const utility::string_t& value)
{
    m_Event_schema_version = value;
    m_Event_schema_versionIsSet = true;
}

bool EventMessage::eventSchemaVersionIsSet() const
{
    return m_Event_schema_versionIsSet;
}

void EventMessage::unsetEvent_schema_version()
{
    m_Event_schema_versionIsSet = false;
}
utility::string_t EventMessage::getSource() const
{
    return m_Source;
}

void EventMessage::setSource(const utility::string_t& value)
{
    m_Source = value;
    m_SourceIsSet = true;
}

bool EventMessage::sourceIsSet() const
{
    return m_SourceIsSet;
}

void EventMessage::unsetSource()
{
    m_SourceIsSet = false;
}
utility::datetime EventMessage::getTimestamp() const
{
    return m_Timestamp;
}

void EventMessage::setTimestamp(const utility::datetime& value)
{
    m_Timestamp = value;
    m_TimestampIsSet = true;
}

bool EventMessage::timestampIsSet() const
{
    return m_TimestampIsSet;
}

void EventMessage::unsetTimestamp()
{
    m_TimestampIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<AnyType>>& EventMessage::getPayload()
{
    return m_Payload;
}

void EventMessage::setPayload(const std::map<utility::string_t, std::shared_ptr<AnyType>>& value)
{
    m_Payload = value;
    m_PayloadIsSet = true;
}

bool EventMessage::payloadIsSet() const
{
    return m_PayloadIsSet;
}

void EventMessage::unsetPayload()
{
    m_PayloadIsSet = false;
}
utility::string_t EventMessage::getUserId() const
{
    return m_User_id;
}

void EventMessage::setUserId(const utility::string_t& value)
{
    m_User_id = value;
    m_User_idIsSet = true;
}

bool EventMessage::userIdIsSet() const
{
    return m_User_idIsSet;
}

void EventMessage::unsetUser_id()
{
    m_User_idIsSet = false;
}
}
}
}
}


