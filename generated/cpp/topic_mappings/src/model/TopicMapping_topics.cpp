/**
 * Topic Mapping API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TopicMapping_topics.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



TopicMapping_topics::TopicMapping_topics()
{
    m_TaskQueue = utility::conversions::to_string_t("");
    m_TaskQueueIsSet = false;
    m_ResponseQueue = utility::conversions::to_string_t("");
    m_ResponseQueueIsSet = false;
}

TopicMapping_topics::~TopicMapping_topics()
{
}

void TopicMapping_topics::validate()
{
    // TODO: implement validation
}

web::json::value TopicMapping_topics::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TaskQueueIsSet)
    {
        val[utility::conversions::to_string_t(U("taskQueue"))] = ModelBase::toJson(m_TaskQueue);
    }
    if(m_ResponseQueueIsSet)
    {
        val[utility::conversions::to_string_t(U("responseQueue"))] = ModelBase::toJson(m_ResponseQueue);
    }

    return val;
}

bool TopicMapping_topics::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("taskQueue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("taskQueue")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTaskQueue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTaskQueue);
            setTaskQueue(refVal_setTaskQueue);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("responseQueue"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("responseQueue")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setResponseQueue;
            ok &= ModelBase::fromJson(fieldValue, refVal_setResponseQueue);
            setResponseQueue(refVal_setResponseQueue);
        }
    }
    return ok;
}

void TopicMapping_topics::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TaskQueueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("taskQueue")), m_TaskQueue));
    }
    if(m_ResponseQueueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("responseQueue")), m_ResponseQueue));
    }
}

bool TopicMapping_topics::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("taskQueue"))))
    {
        utility::string_t refVal_setTaskQueue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("taskQueue"))), refVal_setTaskQueue );
        setTaskQueue(refVal_setTaskQueue);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("responseQueue"))))
    {
        utility::string_t refVal_setResponseQueue;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("responseQueue"))), refVal_setResponseQueue );
        setResponseQueue(refVal_setResponseQueue);
    }
    return ok;
}

utility::string_t TopicMapping_topics::getTaskQueue() const
{
    return m_TaskQueue;
}

void TopicMapping_topics::setTaskQueue(const utility::string_t& value)
{
    m_TaskQueue = value;
    m_TaskQueueIsSet = true;
}

bool TopicMapping_topics::taskQueueIsSet() const
{
    return m_TaskQueueIsSet;
}

void TopicMapping_topics::unsetTaskQueue()
{
    m_TaskQueueIsSet = false;
}
utility::string_t TopicMapping_topics::getResponseQueue() const
{
    return m_ResponseQueue;
}

void TopicMapping_topics::setResponseQueue(const utility::string_t& value)
{
    m_ResponseQueue = value;
    m_ResponseQueueIsSet = true;
}

bool TopicMapping_topics::responseQueueIsSet() const
{
    return m_ResponseQueueIsSet;
}

void TopicMapping_topics::unsetResponseQueue()
{
    m_ResponseQueueIsSet = false;
}
}
}
}
}


