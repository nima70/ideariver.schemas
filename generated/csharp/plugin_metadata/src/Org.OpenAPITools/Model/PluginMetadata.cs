/*
 * Plugin Management API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// PluginMetadata
    /// </summary>
    [DataContract(Name = "PluginMetadata")]
    public partial class PluginMetadata : IValidatableObject
    {
        /// <summary>
        /// The current status of the plugin
        /// </summary>
        /// <value>The current status of the plugin</value>
        [JsonConverter(typeof(StringEnumConverter))]
        public enum StatusEnum
        {
            /// <summary>
            /// Enum Active for value: active
            /// </summary>
            [EnumMember(Value = "active")]
            Active = 1,

            /// <summary>
            /// Enum Deprecated for value: deprecated
            /// </summary>
            [EnumMember(Value = "deprecated")]
            Deprecated = 2,

            /// <summary>
            /// Enum Pending for value: pending
            /// </summary>
            [EnumMember(Value = "pending")]
            Pending = 3
        }


        /// <summary>
        /// The current status of the plugin
        /// </summary>
        /// <value>The current status of the plugin</value>
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public StatusEnum Status { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="PluginMetadata" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected PluginMetadata() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="PluginMetadata" /> class.
        /// </summary>
        /// <param name="id">Unique identifier for the plugin (required).</param>
        /// <param name="varVersion">Version of the plugin, following semantic versioning (required).</param>
        /// <param name="executableFile">Path to the main executable file for the plugin (required).</param>
        /// <param name="author">author (required).</param>
        /// <param name="inputs">Input validation schema for the plugin (required).</param>
        /// <param name="outputs">Expected output from the plugin.</param>
        /// <param name="description">Brief description of the plugin&#39;s functionality (required).</param>
        /// <param name="status">The current status of the plugin (required).</param>
        /// <param name="createdAt">Timestamp when the plugin was first created (required).</param>
        /// <param name="updatedAt">Timestamp when the plugin was last updated (required).</param>
        /// <param name="tags">Tags associated with the plugin for easy categorization.</param>
        /// <param name="thumbnailUrl">URL of the thumbnail image.</param>
        /// <param name="imageUrls">List of URLs for additional images.</param>
        public PluginMetadata(Guid id = default(Guid), string varVersion = default(string), string executableFile = default(string), PluginMetadataAuthor author = default(PluginMetadataAuthor), Dictionary<string, Object> inputs = default(Dictionary<string, Object>), Dictionary<string, Object> outputs = default(Dictionary<string, Object>), string description = default(string), StatusEnum status = default(StatusEnum), DateTime createdAt = default(DateTime), DateTime updatedAt = default(DateTime), List<string> tags = default(List<string>), string thumbnailUrl = default(string), List<string> imageUrls = default(List<string>))
        {
            this.Id = id;
            // to ensure "varVersion" is required (not null)
            if (varVersion == null)
            {
                throw new ArgumentNullException("varVersion is a required property for PluginMetadata and cannot be null");
            }
            this.VarVersion = varVersion;
            // to ensure "executableFile" is required (not null)
            if (executableFile == null)
            {
                throw new ArgumentNullException("executableFile is a required property for PluginMetadata and cannot be null");
            }
            this.ExecutableFile = executableFile;
            // to ensure "author" is required (not null)
            if (author == null)
            {
                throw new ArgumentNullException("author is a required property for PluginMetadata and cannot be null");
            }
            this.Author = author;
            // to ensure "inputs" is required (not null)
            if (inputs == null)
            {
                throw new ArgumentNullException("inputs is a required property for PluginMetadata and cannot be null");
            }
            this.Inputs = inputs;
            // to ensure "description" is required (not null)
            if (description == null)
            {
                throw new ArgumentNullException("description is a required property for PluginMetadata and cannot be null");
            }
            this.Description = description;
            this.Status = status;
            this.CreatedAt = createdAt;
            this.UpdatedAt = updatedAt;
            this.Outputs = outputs;
            this.Tags = tags;
            this.ThumbnailUrl = thumbnailUrl;
            this.ImageUrls = imageUrls;
        }

        /// <summary>
        /// Unique identifier for the plugin
        /// </summary>
        /// <value>Unique identifier for the plugin</value>
        [DataMember(Name = "id", IsRequired = true, EmitDefaultValue = true)]
        public Guid Id { get; set; }

        /// <summary>
        /// Version of the plugin, following semantic versioning
        /// </summary>
        /// <value>Version of the plugin, following semantic versioning</value>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Path to the main executable file for the plugin
        /// </summary>
        /// <value>Path to the main executable file for the plugin</value>
        [DataMember(Name = "executableFile", IsRequired = true, EmitDefaultValue = true)]
        public string ExecutableFile { get; set; }

        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        [DataMember(Name = "author", IsRequired = true, EmitDefaultValue = true)]
        public PluginMetadataAuthor Author { get; set; }

        /// <summary>
        /// Input validation schema for the plugin
        /// </summary>
        /// <value>Input validation schema for the plugin</value>
        [DataMember(Name = "inputs", IsRequired = true, EmitDefaultValue = true)]
        public Dictionary<string, Object> Inputs { get; set; }

        /// <summary>
        /// Expected output from the plugin
        /// </summary>
        /// <value>Expected output from the plugin</value>
        [DataMember(Name = "outputs", EmitDefaultValue = false)]
        public Dictionary<string, Object> Outputs { get; set; }

        /// <summary>
        /// Brief description of the plugin&#39;s functionality
        /// </summary>
        /// <value>Brief description of the plugin&#39;s functionality</value>
        [DataMember(Name = "description", IsRequired = true, EmitDefaultValue = true)]
        public string Description { get; set; }

        /// <summary>
        /// Timestamp when the plugin was first created
        /// </summary>
        /// <value>Timestamp when the plugin was first created</value>
        [DataMember(Name = "createdAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Timestamp when the plugin was last updated
        /// </summary>
        /// <value>Timestamp when the plugin was last updated</value>
        [DataMember(Name = "updatedAt", IsRequired = true, EmitDefaultValue = true)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Tags associated with the plugin for easy categorization
        /// </summary>
        /// <value>Tags associated with the plugin for easy categorization</value>
        [DataMember(Name = "tags", EmitDefaultValue = false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// URL of the thumbnail image
        /// </summary>
        /// <value>URL of the thumbnail image</value>
        [DataMember(Name = "thumbnailUrl", EmitDefaultValue = false)]
        public string ThumbnailUrl { get; set; }

        /// <summary>
        /// List of URLs for additional images
        /// </summary>
        /// <value>List of URLs for additional images</value>
        [DataMember(Name = "imageUrls", EmitDefaultValue = false)]
        public List<string> ImageUrls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class PluginMetadata {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  ExecutableFile: ").Append(ExecutableFile).Append("\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Inputs: ").Append(Inputs).Append("\n");
            sb.Append("  Outputs: ").Append(Outputs).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  ThumbnailUrl: ").Append(ThumbnailUrl).Append("\n");
            sb.Append("  ImageUrls: ").Append(ImageUrls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
