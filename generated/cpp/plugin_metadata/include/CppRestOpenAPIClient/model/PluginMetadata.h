/**
 * Plugin Metadata API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * PluginMetadata.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_PluginMetadata_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_PluginMetadata_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include "CppRestOpenAPIClient/model/PluginMetadata_author.h"
#include <cpprest/details/basic_types.h>
#include <map>
#include "CppRestOpenAPIClient/AnyType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {

class PluginMetadata_author;


/// <summary>
/// 
/// </summary>
class  PluginMetadata
    : public ModelBase
{
public:
    PluginMetadata();
    virtual ~PluginMetadata();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// PluginMetadata members

    /// <summary>
    /// Unique identifier for the plugin
    /// </summary>
    utility::string_t getNameTag() const;
    bool nameTagIsSet() const;
    void unsetNameTag();

    void setNameTag(const utility::string_t& value);

    /// <summary>
    /// Version of the plugin, following semantic versioning
    /// </summary>
    utility::string_t getVersion() const;
    bool versionIsSet() const;
    void unsetVersion();

    void setVersion(const utility::string_t& value);

    /// <summary>
    /// Path to the main executable file for the plugin
    /// </summary>
    utility::string_t getExecutableFile() const;
    bool executableFileIsSet() const;
    void unsetExecutableFile();

    void setExecutableFile(const utility::string_t& value);

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<PluginMetadata_author> getAuthor() const;
    bool authorIsSet() const;
    void unsetAuthor();

    void setAuthor(const std::shared_ptr<PluginMetadata_author>& value);

    /// <summary>
    /// Input validation schema for the plugin
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<AnyType>>& getInputs();
    bool inputsIsSet() const;
    void unsetInputs();

    void setInputs(const std::map<utility::string_t, std::shared_ptr<AnyType>>& value);

    /// <summary>
    /// Output structure for the plugin
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<AnyType>>& getOutputs();
    bool outputsIsSet() const;
    void unsetOutputs();

    void setOutputs(const std::map<utility::string_t, std::shared_ptr<AnyType>>& value);

    /// <summary>
    /// Brief description of the plugin&#39;s functionality
    /// </summary>
    utility::string_t getDescription() const;
    bool descriptionIsSet() const;
    void unsetDescription();

    void setDescription(const utility::string_t& value);


protected:
    utility::string_t m_NameTag;
    bool m_NameTagIsSet;
    utility::string_t m_Version;
    bool m_VersionIsSet;
    utility::string_t m_ExecutableFile;
    bool m_ExecutableFileIsSet;
    std::shared_ptr<PluginMetadata_author> m_Author;
    bool m_AuthorIsSet;
    std::map<utility::string_t, std::shared_ptr<AnyType>> m_Inputs;
    bool m_InputsIsSet;
    std::map<utility::string_t, std::shared_ptr<AnyType>> m_Outputs;
    bool m_OutputsIsSet;
    utility::string_t m_Description;
    bool m_DescriptionIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_PluginMetadata_H_ */
