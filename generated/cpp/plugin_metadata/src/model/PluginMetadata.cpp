/**
 * Plugin Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/PluginMetadata.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



PluginMetadata::PluginMetadata()
{
    m_Id = utility::conversions::to_string_t("");
    m_IdIsSet = false;
    m_Version = utility::conversions::to_string_t("");
    m_VersionIsSet = false;
    m_ExecutableFile = utility::conversions::to_string_t("");
    m_ExecutableFileIsSet = false;
    m_AuthorIsSet = false;
    m_InputsIsSet = false;
    m_OutputsIsSet = false;
    m_Description = utility::conversions::to_string_t("");
    m_DescriptionIsSet = false;
    m_Status = utility::conversions::to_string_t("");
    m_StatusIsSet = false;
    m_CreatedAt = utility::datetime();
    m_CreatedAtIsSet = false;
    m_UpdatedAt = utility::datetime();
    m_UpdatedAtIsSet = false;
    m_TagsIsSet = false;
    m_ThumbnailUrl = utility::conversions::to_string_t("");
    m_ThumbnailUrlIsSet = false;
    m_ImageUrlsIsSet = false;
}

PluginMetadata::~PluginMetadata()
{
}

void PluginMetadata::validate()
{
    // TODO: implement validation
}

web::json::value PluginMetadata::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_IdIsSet)
    {
        val[utility::conversions::to_string_t(U("id"))] = ModelBase::toJson(m_Id);
    }
    if(m_VersionIsSet)
    {
        val[utility::conversions::to_string_t(U("version"))] = ModelBase::toJson(m_Version);
    }
    if(m_ExecutableFileIsSet)
    {
        val[utility::conversions::to_string_t(U("executableFile"))] = ModelBase::toJson(m_ExecutableFile);
    }
    if(m_AuthorIsSet)
    {
        val[utility::conversions::to_string_t(U("author"))] = ModelBase::toJson(m_Author);
    }
    if(m_InputsIsSet)
    {
        val[utility::conversions::to_string_t(U("inputs"))] = ModelBase::toJson(m_Inputs);
    }
    if(m_OutputsIsSet)
    {
        val[utility::conversions::to_string_t(U("outputs"))] = ModelBase::toJson(m_Outputs);
    }
    if(m_DescriptionIsSet)
    {
        val[utility::conversions::to_string_t(U("description"))] = ModelBase::toJson(m_Description);
    }
    if(m_StatusIsSet)
    {
        val[utility::conversions::to_string_t(U("status"))] = ModelBase::toJson(m_Status);
    }
    if(m_CreatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("createdAt"))] = ModelBase::toJson(m_CreatedAt);
    }
    if(m_UpdatedAtIsSet)
    {
        val[utility::conversions::to_string_t(U("updatedAt"))] = ModelBase::toJson(m_UpdatedAt);
    }
    if(m_TagsIsSet)
    {
        val[utility::conversions::to_string_t(U("tags"))] = ModelBase::toJson(m_Tags);
    }
    if(m_ThumbnailUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("thumbnailUrl"))] = ModelBase::toJson(m_ThumbnailUrl);
    }
    if(m_ImageUrlsIsSet)
    {
        val[utility::conversions::to_string_t(U("imageUrls"))] = ModelBase::toJson(m_ImageUrls);
    }

    return val;
}

bool PluginMetadata::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("id"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("id")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setId;
            ok &= ModelBase::fromJson(fieldValue, refVal_setId);
            setId(refVal_setId);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("version"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("version")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setVersion;
            ok &= ModelBase::fromJson(fieldValue, refVal_setVersion);
            setVersion(refVal_setVersion);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("executableFile"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("executableFile")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setExecutableFile;
            ok &= ModelBase::fromJson(fieldValue, refVal_setExecutableFile);
            setExecutableFile(refVal_setExecutableFile);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("author"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("author")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<PluginMetadata_author> refVal_setAuthor;
            ok &= ModelBase::fromJson(fieldValue, refVal_setAuthor);
            setAuthor(refVal_setAuthor);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("inputs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("inputs")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<AnyType>> refVal_setInputs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setInputs);
            setInputs(refVal_setInputs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("outputs"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("outputs")));
        if(!fieldValue.is_null())
        {
            std::map<utility::string_t, std::shared_ptr<AnyType>> refVal_setOutputs;
            ok &= ModelBase::fromJson(fieldValue, refVal_setOutputs);
            setOutputs(refVal_setOutputs);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("description"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("description")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setDescription;
            ok &= ModelBase::fromJson(fieldValue, refVal_setDescription);
            setDescription(refVal_setDescription);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("status"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("status")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setStatus;
            ok &= ModelBase::fromJson(fieldValue, refVal_setStatus);
            setStatus(refVal_setStatus);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("createdAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("createdAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setCreatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setCreatedAt);
            setCreatedAt(refVal_setCreatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("updatedAt"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("updatedAt")));
        if(!fieldValue.is_null())
        {
            utility::datetime refVal_setUpdatedAt;
            ok &= ModelBase::fromJson(fieldValue, refVal_setUpdatedAt);
            setUpdatedAt(refVal_setUpdatedAt);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("tags"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("tags")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setTags;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTags);
            setTags(refVal_setTags);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("thumbnailUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("thumbnailUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setThumbnailUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setThumbnailUrl);
            setThumbnailUrl(refVal_setThumbnailUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imageUrls"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imageUrls")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setImageUrls;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImageUrls);
            setImageUrls(refVal_setImageUrls);
        }
    }
    return ok;
}

void PluginMetadata::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_IdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("id")), m_Id));
    }
    if(m_VersionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("version")), m_Version));
    }
    if(m_ExecutableFileIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("executableFile")), m_ExecutableFile));
    }
    if(m_AuthorIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("author")), m_Author));
    }
    if(m_InputsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("inputs")), m_Inputs));
    }
    if(m_OutputsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("outputs")), m_Outputs));
    }
    if(m_DescriptionIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("description")), m_Description));
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("status")), m_Status));
    }
    if(m_CreatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("createdAt")), m_CreatedAt));
    }
    if(m_UpdatedAtIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("updatedAt")), m_UpdatedAt));
    }
    if(m_TagsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("tags")), m_Tags));
    }
    if(m_ThumbnailUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("thumbnailUrl")), m_ThumbnailUrl));
    }
    if(m_ImageUrlsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imageUrls")), m_ImageUrls));
    }
}

bool PluginMetadata::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("id"))))
    {
        utility::string_t refVal_setId;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("id"))), refVal_setId );
        setId(refVal_setId);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("version"))))
    {
        utility::string_t refVal_setVersion;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("version"))), refVal_setVersion );
        setVersion(refVal_setVersion);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("executableFile"))))
    {
        utility::string_t refVal_setExecutableFile;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("executableFile"))), refVal_setExecutableFile );
        setExecutableFile(refVal_setExecutableFile);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("author"))))
    {
        std::shared_ptr<PluginMetadata_author> refVal_setAuthor;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("author"))), refVal_setAuthor );
        setAuthor(refVal_setAuthor);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("inputs"))))
    {
        std::map<utility::string_t, std::shared_ptr<AnyType>> refVal_setInputs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("inputs"))), refVal_setInputs );
        setInputs(refVal_setInputs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("outputs"))))
    {
        std::map<utility::string_t, std::shared_ptr<AnyType>> refVal_setOutputs;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("outputs"))), refVal_setOutputs );
        setOutputs(refVal_setOutputs);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("description"))))
    {
        utility::string_t refVal_setDescription;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("description"))), refVal_setDescription );
        setDescription(refVal_setDescription);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("status"))))
    {
        utility::string_t refVal_setStatus;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("status"))), refVal_setStatus );
        setStatus(refVal_setStatus);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("createdAt"))))
    {
        utility::datetime refVal_setCreatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("createdAt"))), refVal_setCreatedAt );
        setCreatedAt(refVal_setCreatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("updatedAt"))))
    {
        utility::datetime refVal_setUpdatedAt;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("updatedAt"))), refVal_setUpdatedAt );
        setUpdatedAt(refVal_setUpdatedAt);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("tags"))))
    {
        std::vector<utility::string_t> refVal_setTags;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("tags"))), refVal_setTags );
        setTags(refVal_setTags);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("thumbnailUrl"))))
    {
        utility::string_t refVal_setThumbnailUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("thumbnailUrl"))), refVal_setThumbnailUrl );
        setThumbnailUrl(refVal_setThumbnailUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imageUrls"))))
    {
        std::vector<utility::string_t> refVal_setImageUrls;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imageUrls"))), refVal_setImageUrls );
        setImageUrls(refVal_setImageUrls);
    }
    return ok;
}

utility::string_t PluginMetadata::getId() const
{
    return m_Id;
}

void PluginMetadata::setId(const utility::string_t& value)
{
    m_Id = value;
    m_IdIsSet = true;
}

bool PluginMetadata::idIsSet() const
{
    return m_IdIsSet;
}

void PluginMetadata::unsetId()
{
    m_IdIsSet = false;
}
utility::string_t PluginMetadata::getVersion() const
{
    return m_Version;
}

void PluginMetadata::setVersion(const utility::string_t& value)
{
    m_Version = value;
    m_VersionIsSet = true;
}

bool PluginMetadata::versionIsSet() const
{
    return m_VersionIsSet;
}

void PluginMetadata::unsetVersion()
{
    m_VersionIsSet = false;
}
utility::string_t PluginMetadata::getExecutableFile() const
{
    return m_ExecutableFile;
}

void PluginMetadata::setExecutableFile(const utility::string_t& value)
{
    m_ExecutableFile = value;
    m_ExecutableFileIsSet = true;
}

bool PluginMetadata::executableFileIsSet() const
{
    return m_ExecutableFileIsSet;
}

void PluginMetadata::unsetExecutableFile()
{
    m_ExecutableFileIsSet = false;
}
std::shared_ptr<PluginMetadata_author> PluginMetadata::getAuthor() const
{
    return m_Author;
}

void PluginMetadata::setAuthor(const std::shared_ptr<PluginMetadata_author>& value)
{
    m_Author = value;
    m_AuthorIsSet = true;
}

bool PluginMetadata::authorIsSet() const
{
    return m_AuthorIsSet;
}

void PluginMetadata::unsetAuthor()
{
    m_AuthorIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<AnyType>>& PluginMetadata::getInputs()
{
    return m_Inputs;
}

void PluginMetadata::setInputs(const std::map<utility::string_t, std::shared_ptr<AnyType>>& value)
{
    m_Inputs = value;
    m_InputsIsSet = true;
}

bool PluginMetadata::inputsIsSet() const
{
    return m_InputsIsSet;
}

void PluginMetadata::unsetInputs()
{
    m_InputsIsSet = false;
}
std::map<utility::string_t, std::shared_ptr<AnyType>>& PluginMetadata::getOutputs()
{
    return m_Outputs;
}

void PluginMetadata::setOutputs(const std::map<utility::string_t, std::shared_ptr<AnyType>>& value)
{
    m_Outputs = value;
    m_OutputsIsSet = true;
}

bool PluginMetadata::outputsIsSet() const
{
    return m_OutputsIsSet;
}

void PluginMetadata::unsetOutputs()
{
    m_OutputsIsSet = false;
}
utility::string_t PluginMetadata::getDescription() const
{
    return m_Description;
}

void PluginMetadata::setDescription(const utility::string_t& value)
{
    m_Description = value;
    m_DescriptionIsSet = true;
}

bool PluginMetadata::descriptionIsSet() const
{
    return m_DescriptionIsSet;
}

void PluginMetadata::unsetDescription()
{
    m_DescriptionIsSet = false;
}
utility::string_t PluginMetadata::getStatus() const
{
    return m_Status;
}

void PluginMetadata::setStatus(const utility::string_t& value)
{
    m_Status = value;
    m_StatusIsSet = true;
}

bool PluginMetadata::statusIsSet() const
{
    return m_StatusIsSet;
}

void PluginMetadata::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::datetime PluginMetadata::getCreatedAt() const
{
    return m_CreatedAt;
}

void PluginMetadata::setCreatedAt(const utility::datetime& value)
{
    m_CreatedAt = value;
    m_CreatedAtIsSet = true;
}

bool PluginMetadata::createdAtIsSet() const
{
    return m_CreatedAtIsSet;
}

void PluginMetadata::unsetCreatedAt()
{
    m_CreatedAtIsSet = false;
}
utility::datetime PluginMetadata::getUpdatedAt() const
{
    return m_UpdatedAt;
}

void PluginMetadata::setUpdatedAt(const utility::datetime& value)
{
    m_UpdatedAt = value;
    m_UpdatedAtIsSet = true;
}

bool PluginMetadata::updatedAtIsSet() const
{
    return m_UpdatedAtIsSet;
}

void PluginMetadata::unsetUpdatedAt()
{
    m_UpdatedAtIsSet = false;
}
std::vector<utility::string_t>& PluginMetadata::getTags()
{
    return m_Tags;
}

void PluginMetadata::setTags(const std::vector<utility::string_t>& value)
{
    m_Tags = value;
    m_TagsIsSet = true;
}

bool PluginMetadata::tagsIsSet() const
{
    return m_TagsIsSet;
}

void PluginMetadata::unsetTags()
{
    m_TagsIsSet = false;
}
utility::string_t PluginMetadata::getThumbnailUrl() const
{
    return m_ThumbnailUrl;
}

void PluginMetadata::setThumbnailUrl(const utility::string_t& value)
{
    m_ThumbnailUrl = value;
    m_ThumbnailUrlIsSet = true;
}

bool PluginMetadata::thumbnailUrlIsSet() const
{
    return m_ThumbnailUrlIsSet;
}

void PluginMetadata::unsetThumbnailUrl()
{
    m_ThumbnailUrlIsSet = false;
}
std::vector<utility::string_t>& PluginMetadata::getImageUrls()
{
    return m_ImageUrls;
}

void PluginMetadata::setImageUrls(const std::vector<utility::string_t>& value)
{
    m_ImageUrls = value;
    m_ImageUrlsIsSet = true;
}

bool PluginMetadata::imageUrlsIsSet() const
{
    return m_ImageUrlsIsSet;
}

void PluginMetadata::unsetImageUrls()
{
    m_ImageUrlsIsSet = false;
}
}
}
}
}


