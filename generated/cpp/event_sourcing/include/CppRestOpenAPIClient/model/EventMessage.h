/**
 * Event Sourcing API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * EventMessage.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_MODEL_EventMessage_H_
#define ORG_OPENAPITOOLS_CLIENT_MODEL_EventMessage_H_


#include "CppRestOpenAPIClient/ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <map>
#include "CppRestOpenAPIClient/AnyType.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



/// <summary>
/// 
/// </summary>
class  EventMessage
    : public ModelBase
{
public:
    EventMessage();
    virtual ~EventMessage();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    bool fromJson(const web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    bool fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// EventMessage members

    /// <summary>
    /// Unique identifier for the event
    /// </summary>
    utility::string_t getEventId() const;
    bool eventIdIsSet() const;
    void unsetEvent_id();

    void setEventId(const utility::string_t& value);

    /// <summary>
    /// ID of the entity (aggregate) that this event relates to
    /// </summary>
    utility::string_t getAggregateId() const;
    bool aggregateIdIsSet() const;
    void unsetAggregate_id();

    void setAggregateId(const utility::string_t& value);

    /// <summary>
    /// Type of the aggregate, e.g., &#39;plugin&#39;, &#39;user&#39;, etc.
    /// </summary>
    utility::string_t getAggregateType() const;
    bool aggregateTypeIsSet() const;
    void unsetAggregate_type();

    void setAggregateType(const utility::string_t& value);

    /// <summary>
    /// Version of the aggregate&#39;s state after this event
    /// </summary>
    double getVersion() const;
    bool versionIsSet() const;
    void unsetVersion();

    void setVersion(double value);

    /// <summary>
    /// Type of the event, e.g., &#39;PLUGIN_RUN&#39;, &#39;USER_ACTION&#39;
    /// </summary>
    utility::string_t getEventType() const;
    bool eventTypeIsSet() const;
    void unsetEvent_type();

    void setEventType(const utility::string_t& value);

    /// <summary>
    /// Version of the event schema
    /// </summary>
    utility::string_t getEventSchemaVersion() const;
    bool eventSchemaVersionIsSet() const;
    void unsetEvent_schema_version();

    void setEventSchemaVersion(const utility::string_t& value);

    /// <summary>
    /// Origin or source of the event, typically the service name
    /// </summary>
    utility::string_t getSource() const;
    bool sourceIsSet() const;
    void unsetSource();

    void setSource(const utility::string_t& value);

    /// <summary>
    /// ISO 8601 timestamp for when the event occurred
    /// </summary>
    utility::datetime getTimestamp() const;
    bool timestampIsSet() const;
    void unsetTimestamp();

    void setTimestamp(const utility::datetime& value);

    /// <summary>
    /// Data related to the event, this varies depending on event type
    /// </summary>
    std::map<utility::string_t, std::shared_ptr<AnyType>>& getPayload();
    bool payloadIsSet() const;
    void unsetPayload();

    void setPayload(const std::map<utility::string_t, std::shared_ptr<AnyType>>& value);

    /// <summary>
    /// ID of the user initiating the event
    /// </summary>
    utility::string_t getUserId() const;
    bool userIdIsSet() const;
    void unsetUser_id();

    void setUserId(const utility::string_t& value);


protected:
    utility::string_t m_Event_id;
    bool m_Event_idIsSet;
    utility::string_t m_Aggregate_id;
    bool m_Aggregate_idIsSet;
    utility::string_t m_Aggregate_type;
    bool m_Aggregate_typeIsSet;
    double m_Version;
    bool m_VersionIsSet;
    utility::string_t m_Event_type;
    bool m_Event_typeIsSet;
    utility::string_t m_Event_schema_version;
    bool m_Event_schema_versionIsSet;
    utility::string_t m_Source;
    bool m_SourceIsSet;
    utility::datetime m_Timestamp;
    bool m_TimestampIsSet;
    std::map<utility::string_t, std::shared_ptr<AnyType>> m_Payload;
    bool m_PayloadIsSet;
    utility::string_t m_User_id;
    bool m_User_idIsSet;
};


}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_MODEL_EventMessage_H_ */
