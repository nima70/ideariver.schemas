/* tslint:disable */
/* eslint-disable */
/**
 * Plugin Metadata API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PluginMetadataAuthor } from './PluginMetadataAuthor';
import {
    PluginMetadataAuthorFromJSON,
    PluginMetadataAuthorFromJSONTyped,
    PluginMetadataAuthorToJSON,
    PluginMetadataAuthorToJSONTyped,
} from './PluginMetadataAuthor';

/**
 * 
 * @export
 * @interface PluginMetadata
 */
export interface PluginMetadata {
    /**
     * Unique identifier for the plugin
     * @type {string}
     * @memberof PluginMetadata
     */
    nameTag: string;
    /**
     * Version of the plugin, following semantic versioning
     * @type {string}
     * @memberof PluginMetadata
     */
    version: string;
    /**
     * Path to the main executable file for the plugin
     * @type {string}
     * @memberof PluginMetadata
     */
    executableFile: string;
    /**
     * 
     * @type {PluginMetadataAuthor}
     * @memberof PluginMetadata
     */
    author: PluginMetadataAuthor;
    /**
     * Input validation schema for the plugin
     * @type {{ [key: string]: any; }}
     * @memberof PluginMetadata
     */
    inputs: { [key: string]: any; };
    /**
     * Output structure for the plugin
     * @type {{ [key: string]: any; }}
     * @memberof PluginMetadata
     */
    outputs?: { [key: string]: any; };
    /**
     * Brief description of the plugin's functionality
     * @type {string}
     * @memberof PluginMetadata
     */
    description: string;
}

/**
 * Check if a given object implements the PluginMetadata interface.
 */
export function instanceOfPluginMetadata(value: object): value is PluginMetadata {
    if (!('nameTag' in value) || value['nameTag'] === undefined) return false;
    if (!('version' in value) || value['version'] === undefined) return false;
    if (!('executableFile' in value) || value['executableFile'] === undefined) return false;
    if (!('author' in value) || value['author'] === undefined) return false;
    if (!('inputs' in value) || value['inputs'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    return true;
}

export function PluginMetadataFromJSON(json: any): PluginMetadata {
    return PluginMetadataFromJSONTyped(json, false);
}

export function PluginMetadataFromJSONTyped(json: any, ignoreDiscriminator: boolean): PluginMetadata {
    if (json == null) {
        return json;
    }
    return {
        
        'nameTag': json['nameTag'],
        'version': json['version'],
        'executableFile': json['executableFile'],
        'author': PluginMetadataAuthorFromJSON(json['author']),
        'inputs': json['inputs'],
        'outputs': json['outputs'] == null ? undefined : json['outputs'],
        'description': json['description'],
    };
}

  export function PluginMetadataToJSON(json: any): PluginMetadata {
      return PluginMetadataToJSONTyped(json, false);
  }

  export function PluginMetadataToJSONTyped(value?: PluginMetadata | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'nameTag': value['nameTag'],
        'version': value['version'],
        'executableFile': value['executableFile'],
        'author': PluginMetadataAuthorToJSON(value['author']),
        'inputs': value['inputs'],
        'outputs': value['outputs'],
        'description': value['description'],
    };
}

