/**
 * Plugin Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/_plugins__id__images_get_200_response.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



_plugins__id__images_get_200_response::_plugins__id__images_get_200_response()
{
    m_ThumbnailUrl = utility::conversions::to_string_t("");
    m_ThumbnailUrlIsSet = false;
    m_ImageUrlsIsSet = false;
}

_plugins__id__images_get_200_response::~_plugins__id__images_get_200_response()
{
}

void _plugins__id__images_get_200_response::validate()
{
    // TODO: implement validation
}

web::json::value _plugins__id__images_get_200_response::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_ThumbnailUrlIsSet)
    {
        val[utility::conversions::to_string_t(U("thumbnailUrl"))] = ModelBase::toJson(m_ThumbnailUrl);
    }
    if(m_ImageUrlsIsSet)
    {
        val[utility::conversions::to_string_t(U("imageUrls"))] = ModelBase::toJson(m_ImageUrls);
    }

    return val;
}

bool _plugins__id__images_get_200_response::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("thumbnailUrl"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("thumbnailUrl")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setThumbnailUrl;
            ok &= ModelBase::fromJson(fieldValue, refVal_setThumbnailUrl);
            setThumbnailUrl(refVal_setThumbnailUrl);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("imageUrls"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("imageUrls")));
        if(!fieldValue.is_null())
        {
            std::vector<utility::string_t> refVal_setImageUrls;
            ok &= ModelBase::fromJson(fieldValue, refVal_setImageUrls);
            setImageUrls(refVal_setImageUrls);
        }
    }
    return ok;
}

void _plugins__id__images_get_200_response::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_ThumbnailUrlIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("thumbnailUrl")), m_ThumbnailUrl));
    }
    if(m_ImageUrlsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("imageUrls")), m_ImageUrls));
    }
}

bool _plugins__id__images_get_200_response::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("thumbnailUrl"))))
    {
        utility::string_t refVal_setThumbnailUrl;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("thumbnailUrl"))), refVal_setThumbnailUrl );
        setThumbnailUrl(refVal_setThumbnailUrl);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("imageUrls"))))
    {
        std::vector<utility::string_t> refVal_setImageUrls;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("imageUrls"))), refVal_setImageUrls );
        setImageUrls(refVal_setImageUrls);
    }
    return ok;
}

utility::string_t _plugins__id__images_get_200_response::getThumbnailUrl() const
{
    return m_ThumbnailUrl;
}

void _plugins__id__images_get_200_response::setThumbnailUrl(const utility::string_t& value)
{
    m_ThumbnailUrl = value;
    m_ThumbnailUrlIsSet = true;
}

bool _plugins__id__images_get_200_response::thumbnailUrlIsSet() const
{
    return m_ThumbnailUrlIsSet;
}

void _plugins__id__images_get_200_response::unsetThumbnailUrl()
{
    m_ThumbnailUrlIsSet = false;
}
std::vector<utility::string_t>& _plugins__id__images_get_200_response::getImageUrls()
{
    return m_ImageUrls;
}

void _plugins__id__images_get_200_response::setImageUrls(const std::vector<utility::string_t>& value)
{
    m_ImageUrls = value;
    m_ImageUrlsIsSet = true;
}

bool _plugins__id__images_get_200_response::imageUrlsIsSet() const
{
    return m_ImageUrlsIsSet;
}

void _plugins__id__images_get_200_response::unsetImageUrls()
{
    m_ImageUrlsIsSet = false;
}
}
}
}
}


