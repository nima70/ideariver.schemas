/**
 * Plugin Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * DefaultApi.h
 *
 * 
 */

#ifndef ORG_OPENAPITOOLS_CLIENT_API_DefaultApi_H_
#define ORG_OPENAPITOOLS_CLIENT_API_DefaultApi_H_



#include "CppRestOpenAPIClient/ApiClient.h"

#include "CppRestOpenAPIClient/HttpContent.h"
#include "CppRestOpenAPIClient/model/PluginMetadata.h"
#include "CppRestOpenAPIClient/model/_plugins__id__images_get_200_response.h"
#include "CppRestOpenAPIClient/model/_plugins__id__images_thumbnail_put_request.h"
#include <cpprest/details/basic_types.h>
#include <boost/optional.hpp>

namespace org {
namespace openapitools {
namespace client {
namespace api {

using namespace org::openapitools::client::model;



class  DefaultApi 
{
public:

    explicit DefaultApi( std::shared_ptr<const ApiClient> apiClient );

    virtual ~DefaultApi();

    /// <summary>
    /// Delete a plugin by ID
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<void> pluginsIdDelete(
        utility::string_t id
    ) const;
    /// <summary>
    /// Get plugin metadata by ID
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<PluginMetadata>> pluginsIdGet(
        utility::string_t id
    ) const;
    /// <summary>
    /// Delete a specific image of a plugin
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="filename"></param>
    pplx::task<void> pluginsIdImagesFilenameDelete(
        utility::string_t id,
        utility::string_t filename
    ) const;
    /// <summary>
    /// Get all images of a plugin
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    pplx::task<std::shared_ptr<_plugins__id__images_get_200_response>> pluginsIdImagesGet(
        utility::string_t id
    ) const;
    /// <summary>
    /// Upload multiple images for a plugin
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="images">Images to upload (optional, default to utility::conversions::to_string_t(&quot;&quot;))</param>
    pplx::task<void> pluginsIdImagesPost(
        utility::string_t id,
        boost::optional<std::vector<std::shared_ptr<HttpContent>>> images
    ) const;
    /// <summary>
    /// Set or update the thumbnail image for a plugin
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="pluginsIdImagesThumbnailPutRequest"> (optional)</param>
    pplx::task<void> pluginsIdImagesThumbnailPut(
        utility::string_t id,
        boost::optional<std::shared_ptr<_plugins__id__images_thumbnail_put_request>> pluginsIdImagesThumbnailPutRequest
    ) const;
    /// <summary>
    /// Update plugin metadata
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="id"></param>
    /// <param name="pluginMetadata"> (optional)</param>
    pplx::task<void> pluginsIdPut(
        utility::string_t id,
        boost::optional<std::shared_ptr<PluginMetadata>> pluginMetadata
    ) const;
    /// <summary>
    /// Upload a new plugin
    /// </summary>
    /// <remarks>
    /// 
    /// </remarks>
    /// <param name="pluginMetadata"> (optional)</param>
    pplx::task<void> pluginsPost(
        boost::optional<std::shared_ptr<PluginMetadata>> pluginMetadata
    ) const;

protected:
    std::shared_ptr<const ApiClient> m_ApiClient;
};

}
}
}
}

#endif /* ORG_OPENAPITOOLS_CLIENT_API_DefaultApi_H_ */

