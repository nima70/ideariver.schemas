/*
 * Event Sourcing API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// EventMessage
    /// </summary>
    [DataContract(Name = "EventMessage")]
    public partial class EventMessage : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="EventMessage" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected EventMessage() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="EventMessage" /> class.
        /// </summary>
        /// <param name="eventId">Unique identifier for the event (required).</param>
        /// <param name="aggregateId">ID of the entity (aggregate) that this event relates to (required).</param>
        /// <param name="aggregateType">Type of the aggregate, e.g., &#39;plugin&#39;, &#39;user&#39;, etc..</param>
        /// <param name="varVersion">Version of the aggregate&#39;s state after this event (required) (default to 1M).</param>
        /// <param name="eventType">Type of the event, e.g., &#39;PLUGIN_RUN&#39;, &#39;USER_ACTION&#39; (required).</param>
        /// <param name="eventSchemaVersion">Version of the event schema (required) (default to &quot;1.0&quot;).</param>
        /// <param name="source">Origin or source of the event, typically the service name (required).</param>
        /// <param name="timestamp">ISO 8601 timestamp for when the event occurred (required).</param>
        /// <param name="payload">Data related to the event, this varies depending on event type.</param>
        /// <param name="userId">ID of the user initiating the event.</param>
        public EventMessage(string eventId = default(string), string aggregateId = default(string), string aggregateType = default(string), decimal varVersion = 1M, string eventType = default(string), string eventSchemaVersion = @"1.0", string source = default(string), DateTime timestamp = default(DateTime), Dictionary<string, Object> payload = default(Dictionary<string, Object>), string userId = default(string))
        {
            // to ensure "eventId" is required (not null)
            if (eventId == null)
            {
                throw new ArgumentNullException("eventId is a required property for EventMessage and cannot be null");
            }
            this.EventId = eventId;
            // to ensure "aggregateId" is required (not null)
            if (aggregateId == null)
            {
                throw new ArgumentNullException("aggregateId is a required property for EventMessage and cannot be null");
            }
            this.AggregateId = aggregateId;
            this.VarVersion = varVersion;
            // to ensure "eventType" is required (not null)
            if (eventType == null)
            {
                throw new ArgumentNullException("eventType is a required property for EventMessage and cannot be null");
            }
            this.EventType = eventType;
            // to ensure "eventSchemaVersion" is required (not null)
            if (eventSchemaVersion == null)
            {
                throw new ArgumentNullException("eventSchemaVersion is a required property for EventMessage and cannot be null");
            }
            this.EventSchemaVersion = eventSchemaVersion;
            // to ensure "source" is required (not null)
            if (source == null)
            {
                throw new ArgumentNullException("source is a required property for EventMessage and cannot be null");
            }
            this.Source = source;
            this.Timestamp = timestamp;
            this.AggregateType = aggregateType;
            this.Payload = payload;
            this.UserId = userId;
        }

        /// <summary>
        /// Unique identifier for the event
        /// </summary>
        /// <value>Unique identifier for the event</value>
        [DataMember(Name = "event_id", IsRequired = true, EmitDefaultValue = true)]
        public string EventId { get; set; }

        /// <summary>
        /// ID of the entity (aggregate) that this event relates to
        /// </summary>
        /// <value>ID of the entity (aggregate) that this event relates to</value>
        [DataMember(Name = "aggregate_id", IsRequired = true, EmitDefaultValue = true)]
        public string AggregateId { get; set; }

        /// <summary>
        /// Type of the aggregate, e.g., &#39;plugin&#39;, &#39;user&#39;, etc.
        /// </summary>
        /// <value>Type of the aggregate, e.g., &#39;plugin&#39;, &#39;user&#39;, etc.</value>
        [DataMember(Name = "aggregate_type", EmitDefaultValue = false)]
        public string AggregateType { get; set; }

        /// <summary>
        /// Version of the aggregate&#39;s state after this event
        /// </summary>
        /// <value>Version of the aggregate&#39;s state after this event</value>
        [DataMember(Name = "version", IsRequired = true, EmitDefaultValue = true)]
        public decimal VarVersion { get; set; }

        /// <summary>
        /// Type of the event, e.g., &#39;PLUGIN_RUN&#39;, &#39;USER_ACTION&#39;
        /// </summary>
        /// <value>Type of the event, e.g., &#39;PLUGIN_RUN&#39;, &#39;USER_ACTION&#39;</value>
        [DataMember(Name = "event_type", IsRequired = true, EmitDefaultValue = true)]
        public string EventType { get; set; }

        /// <summary>
        /// Version of the event schema
        /// </summary>
        /// <value>Version of the event schema</value>
        [DataMember(Name = "event_schema_version", IsRequired = true, EmitDefaultValue = true)]
        public string EventSchemaVersion { get; set; }

        /// <summary>
        /// Origin or source of the event, typically the service name
        /// </summary>
        /// <value>Origin or source of the event, typically the service name</value>
        [DataMember(Name = "source", IsRequired = true, EmitDefaultValue = true)]
        public string Source { get; set; }

        /// <summary>
        /// ISO 8601 timestamp for when the event occurred
        /// </summary>
        /// <value>ISO 8601 timestamp for when the event occurred</value>
        [DataMember(Name = "timestamp", IsRequired = true, EmitDefaultValue = true)]
        public DateTime Timestamp { get; set; }

        /// <summary>
        /// Data related to the event, this varies depending on event type
        /// </summary>
        /// <value>Data related to the event, this varies depending on event type</value>
        [DataMember(Name = "payload", EmitDefaultValue = true)]
        public Dictionary<string, Object> Payload { get; set; }

        /// <summary>
        /// ID of the user initiating the event
        /// </summary>
        /// <value>ID of the user initiating the event</value>
        [DataMember(Name = "user_id", EmitDefaultValue = false)]
        public string UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class EventMessage {\n");
            sb.Append("  EventId: ").Append(EventId).Append("\n");
            sb.Append("  AggregateId: ").Append(AggregateId).Append("\n");
            sb.Append("  AggregateType: ").Append(AggregateType).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  EventSchemaVersion: ").Append(EventSchemaVersion).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  Payload: ").Append(Payload).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
