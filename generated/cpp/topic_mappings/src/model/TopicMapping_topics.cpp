/**
 * Topic Mapping API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TopicMapping_topics.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



TopicMapping_topics::TopicMapping_topics()
{
    m_TASK_QUEUE = utility::conversions::to_string_t("");
    m_TASK_QUEUEIsSet = false;
    m_RESPONSE_QUEUE = utility::conversions::to_string_t("");
    m_RESPONSE_QUEUEIsSet = false;
}

TopicMapping_topics::~TopicMapping_topics()
{
}

void TopicMapping_topics::validate()
{
    // TODO: implement validation
}

web::json::value TopicMapping_topics::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TASK_QUEUEIsSet)
    {
        val[utility::conversions::to_string_t(U("TASK_QUEUE"))] = ModelBase::toJson(m_TASK_QUEUE);
    }
    if(m_RESPONSE_QUEUEIsSet)
    {
        val[utility::conversions::to_string_t(U("RESPONSE_QUEUE"))] = ModelBase::toJson(m_RESPONSE_QUEUE);
    }

    return val;
}

bool TopicMapping_topics::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("TASK_QUEUE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("TASK_QUEUE")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setTASKQUEUE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTASKQUEUE);
            setTASKQUEUE(refVal_setTASKQUEUE);
        }
    }
    if(val.has_field(utility::conversions::to_string_t(U("RESPONSE_QUEUE"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("RESPONSE_QUEUE")));
        if(!fieldValue.is_null())
        {
            utility::string_t refVal_setRESPONSEQUEUE;
            ok &= ModelBase::fromJson(fieldValue, refVal_setRESPONSEQUEUE);
            setRESPONSEQUEUE(refVal_setRESPONSEQUEUE);
        }
    }
    return ok;
}

void TopicMapping_topics::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TASK_QUEUEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("TASK_QUEUE")), m_TASK_QUEUE));
    }
    if(m_RESPONSE_QUEUEIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("RESPONSE_QUEUE")), m_RESPONSE_QUEUE));
    }
}

bool TopicMapping_topics::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("TASK_QUEUE"))))
    {
        utility::string_t refVal_setTASKQUEUE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("TASK_QUEUE"))), refVal_setTASKQUEUE );
        setTASKQUEUE(refVal_setTASKQUEUE);
    }
    if(multipart->hasContent(utility::conversions::to_string_t(U("RESPONSE_QUEUE"))))
    {
        utility::string_t refVal_setRESPONSEQUEUE;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("RESPONSE_QUEUE"))), refVal_setRESPONSEQUEUE );
        setRESPONSEQUEUE(refVal_setRESPONSEQUEUE);
    }
    return ok;
}

utility::string_t TopicMapping_topics::getTASKQUEUE() const
{
    return m_TASK_QUEUE;
}

void TopicMapping_topics::setTASKQUEUE(const utility::string_t& value)
{
    m_TASK_QUEUE = value;
    m_TASK_QUEUEIsSet = true;
}

bool TopicMapping_topics::tASKQUEUEIsSet() const
{
    return m_TASK_QUEUEIsSet;
}

void TopicMapping_topics::unsetTASK_QUEUE()
{
    m_TASK_QUEUEIsSet = false;
}
utility::string_t TopicMapping_topics::getRESPONSEQUEUE() const
{
    return m_RESPONSE_QUEUE;
}

void TopicMapping_topics::setRESPONSEQUEUE(const utility::string_t& value)
{
    m_RESPONSE_QUEUE = value;
    m_RESPONSE_QUEUEIsSet = true;
}

bool TopicMapping_topics::rESPONSEQUEUEIsSet() const
{
    return m_RESPONSE_QUEUEIsSet;
}

void TopicMapping_topics::unsetRESPONSE_QUEUE()
{
    m_RESPONSE_QUEUEIsSet = false;
}
}
}
}
}


