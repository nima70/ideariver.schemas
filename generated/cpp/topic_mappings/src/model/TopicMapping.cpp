/**
 * Topic Mapping API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI-Generator 7.9.0.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */



#include "CppRestOpenAPIClient/model/TopicMapping.h"

namespace org {
namespace openapitools {
namespace client {
namespace model {



TopicMapping::TopicMapping()
{
    m_TopicsIsSet = false;
}

TopicMapping::~TopicMapping()
{
}

void TopicMapping::validate()
{
    // TODO: implement validation
}

web::json::value TopicMapping::toJson() const
{

    web::json::value val = web::json::value::object();
    
    if(m_TopicsIsSet)
    {
        val[utility::conversions::to_string_t(U("topics"))] = ModelBase::toJson(m_Topics);
    }

    return val;
}

bool TopicMapping::fromJson(const web::json::value& val)
{
    bool ok = true;
    
    if(val.has_field(utility::conversions::to_string_t(U("topics"))))
    {
        const web::json::value& fieldValue = val.at(utility::conversions::to_string_t(U("topics")));
        if(!fieldValue.is_null())
        {
            std::shared_ptr<TopicMapping_topics> refVal_setTopics;
            ok &= ModelBase::fromJson(fieldValue, refVal_setTopics);
            setTopics(refVal_setTopics);
        }
    }
    return ok;
}

void TopicMapping::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }
    if(m_TopicsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + utility::conversions::to_string_t(U("topics")), m_Topics));
    }
}

bool TopicMapping::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    bool ok = true;
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix.substr(namePrefix.size() - 1) != utility::conversions::to_string_t(U(".")))
    {
        namePrefix += utility::conversions::to_string_t(U("."));
    }

    if(multipart->hasContent(utility::conversions::to_string_t(U("topics"))))
    {
        std::shared_ptr<TopicMapping_topics> refVal_setTopics;
        ok &= ModelBase::fromHttpContent(multipart->getContent(utility::conversions::to_string_t(U("topics"))), refVal_setTopics );
        setTopics(refVal_setTopics);
    }
    return ok;
}

std::shared_ptr<TopicMapping_topics> TopicMapping::getTopics() const
{
    return m_Topics;
}

void TopicMapping::setTopics(const std::shared_ptr<TopicMapping_topics>& value)
{
    m_Topics = value;
    m_TopicsIsSet = true;
}

bool TopicMapping::topicsIsSet() const
{
    return m_TopicsIsSet;
}

void TopicMapping::unsetTopics()
{
    m_TopicsIsSet = false;
}
}
}
}
}


