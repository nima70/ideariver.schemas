/* tslint:disable */
/* eslint-disable */
/**
 * Plugin Management API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  PluginMetadata,
  PluginsIdImagesGet200Response,
  PluginsIdImagesThumbnailPutRequest,
} from '../models/index';
import {
    PluginMetadataFromJSON,
    PluginMetadataToJSON,
    PluginsIdImagesGet200ResponseFromJSON,
    PluginsIdImagesGet200ResponseToJSON,
    PluginsIdImagesThumbnailPutRequestFromJSON,
    PluginsIdImagesThumbnailPutRequestToJSON,
} from '../models/index';

export interface PluginsIdDeleteRequest {
    id: string;
}

export interface PluginsIdGetRequest {
    id: string;
}

export interface PluginsIdImagesFilenameDeleteRequest {
    id: string;
    filename: string;
}

export interface PluginsIdImagesGetRequest {
    id: string;
}

export interface PluginsIdImagesPostRequest {
    id: string;
    images?: Array<Blob>;
}

export interface PluginsIdImagesThumbnailPutOperationRequest {
    id: string;
    pluginsIdImagesThumbnailPutRequest?: PluginsIdImagesThumbnailPutRequest;
}

export interface PluginsIdPutRequest {
    id: string;
    pluginMetadata?: PluginMetadata;
}

export interface PluginsPostRequest {
    pluginMetadata?: PluginMetadata;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Delete a plugin by ID
     */
    async pluginsIdDeleteRaw(requestParameters: PluginsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/plugins/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a plugin by ID
     */
    async pluginsIdDelete(requestParameters: PluginsIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pluginsIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get plugin metadata by ID
     */
    async pluginsIdGetRaw(requestParameters: PluginsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginMetadata>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/plugins/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginMetadataFromJSON(jsonValue));
    }

    /**
     * Get plugin metadata by ID
     */
    async pluginsIdGet(requestParameters: PluginsIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginMetadata> {
        const response = await this.pluginsIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete a specific image of a plugin
     */
    async pluginsIdImagesFilenameDeleteRaw(requestParameters: PluginsIdImagesFilenameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsIdImagesFilenameDelete().'
            );
        }

        if (requestParameters['filename'] == null) {
            throw new runtime.RequiredError(
                'filename',
                'Required parameter "filename" was null or undefined when calling pluginsIdImagesFilenameDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/plugins/{id}/images/{filename}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))).replace(`{${"filename"}}`, encodeURIComponent(String(requestParameters['filename']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a specific image of a plugin
     */
    async pluginsIdImagesFilenameDelete(requestParameters: PluginsIdImagesFilenameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pluginsIdImagesFilenameDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get all images of a plugin
     */
    async pluginsIdImagesGetRaw(requestParameters: PluginsIdImagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PluginsIdImagesGet200Response>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsIdImagesGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/plugins/{id}/images`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PluginsIdImagesGet200ResponseFromJSON(jsonValue));
    }

    /**
     * Get all images of a plugin
     */
    async pluginsIdImagesGet(requestParameters: PluginsIdImagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PluginsIdImagesGet200Response> {
        const response = await this.pluginsIdImagesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Upload multiple images for a plugin
     */
    async pluginsIdImagesPostRaw(requestParameters: PluginsIdImagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsIdImagesPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters['images'] != null) {
            requestParameters['images'].forEach((element) => {
                formParams.append('images', element as any);
            })
        }

        const response = await this.request({
            path: `/plugins/{id}/images`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Upload multiple images for a plugin
     */
    async pluginsIdImagesPost(requestParameters: PluginsIdImagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pluginsIdImagesPostRaw(requestParameters, initOverrides);
    }

    /**
     * Set or update the thumbnail image for a plugin
     */
    async pluginsIdImagesThumbnailPutRaw(requestParameters: PluginsIdImagesThumbnailPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsIdImagesThumbnailPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/plugins/{id}/images/thumbnail`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PluginsIdImagesThumbnailPutRequestToJSON(requestParameters['pluginsIdImagesThumbnailPutRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Set or update the thumbnail image for a plugin
     */
    async pluginsIdImagesThumbnailPut(requestParameters: PluginsIdImagesThumbnailPutOperationRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pluginsIdImagesThumbnailPutRaw(requestParameters, initOverrides);
    }

    /**
     * Update plugin metadata
     */
    async pluginsIdPutRaw(requestParameters: PluginsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling pluginsIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/plugins/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PluginMetadataToJSON(requestParameters['pluginMetadata']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update plugin metadata
     */
    async pluginsIdPut(requestParameters: PluginsIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pluginsIdPutRaw(requestParameters, initOverrides);
    }

    /**
     * Upload a new plugin
     */
    async pluginsPostRaw(requestParameters: PluginsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/plugins`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PluginMetadataToJSON(requestParameters['pluginMetadata']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Upload a new plugin
     */
    async pluginsPost(requestParameters: PluginsPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.pluginsPostRaw(requestParameters, initOverrides);
    }

}
