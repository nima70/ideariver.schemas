# coding: utf-8

"""
    Event Sourcing API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class EventMessage(BaseModel):
    """
    EventMessage
    """ # noqa: E501
    event_id: StrictStr = Field(description="Unique identifier for the event")
    aggregate_id: StrictStr = Field(description="ID of the entity (aggregate) that this event relates to")
    aggregate_type: Optional[StrictStr] = Field(default=None, description="Type of the aggregate, e.g., 'plugin', 'user', etc.")
    version: Union[StrictFloat, StrictInt] = Field(description="Version of the aggregate's state after this event")
    event_type: StrictStr = Field(description="Type of the event, e.g., 'PLUGIN_RUN', 'USER_ACTION'")
    event_schema_version: StrictStr = Field(description="Version of the event schema")
    source: StrictStr = Field(description="Origin or source of the event, typically the service name")
    timestamp: datetime = Field(description="ISO 8601 timestamp for when the event occurred")
    payload: Optional[Dict[str, Any]] = Field(default=None, description="Data related to the event, this varies depending on event type")
    user_id: Optional[StrictStr] = Field(default=None, description="ID of the user initiating the event")
    __properties: ClassVar[List[str]] = ["event_id", "aggregate_id", "aggregate_type", "version", "event_type", "event_schema_version", "source", "timestamp", "payload", "user_id"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of EventMessage from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if payload (nullable) is None
        # and model_fields_set contains the field
        if self.payload is None and "payload" in self.model_fields_set:
            _dict['payload'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of EventMessage from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "event_id": obj.get("event_id"),
            "aggregate_id": obj.get("aggregate_id"),
            "aggregate_type": obj.get("aggregate_type"),
            "version": obj.get("version") if obj.get("version") is not None else 1,
            "event_type": obj.get("event_type"),
            "event_schema_version": obj.get("event_schema_version") if obj.get("event_schema_version") is not None else '1.0',
            "source": obj.get("source"),
            "timestamp": obj.get("timestamp"),
            "payload": obj.get("payload"),
            "user_id": obj.get("user_id")
        })
        return _obj


